{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction The specification of the OSEK operating system is to represent a uniform environment which supports efficient utilisation of resources for automotive control unit application software. The OSEK operating system is a single processor operating system meant for distributed embedded control units","title":"Inroduction"},{"location":"#introduction","text":"The specification of the OSEK operating system is to represent a uniform environment which supports efficient utilisation of resources for automotive control unit application software. The OSEK operating system is a single processor operating system meant for distributed embedded control units","title":"Introduction"},{"location":"pages/about/","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis eleifend a tortor at vulputate. Pellentesque pulvinar congue varius. Maecenas at elementum libero, a tincidunt ipsum. Donec id quam sit amet leo lobortis egestas. Cras accumsan placerat lobortis. Nulla mattis, mi nec lacinia dapibus, mauris magna bibendum metus, sed consectetur sapien lectus id tortor. Nulla eget libero eget diam feugiat iaculis. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nam placerat turpis vitae mi tincidunt ornare. Sed ut nisi aliquet, faucibus elit non, aliquam ligula. Nulla facilisi. Nam aliquet magna in mi iaculis auctor. Vivamus non convallis nulla. Cras luctus ultrices porta. Integer iaculis nulla magna, eu blandit magna efficitur ut. Praesent lobortis leo vel odio congue, ac rhoncus mi mollis. Nam eleifend tellus arcu, sed pellentesque purus convallis vitae. Sed sed cursus lectus. Cras et sapien diam. Nullam quis dignissim leo. Sed tempor a elit at imperdiet. Sed malesuada sem eget bibendum lobortis. Morbi vel luctus erat. Mauris eu neque a magna mollis aliquet. Vestibulum tincidunt ipsum non sem facilisis, quis dictum neque vehicula. Cras eros elit, efficitur ac dignissim quis, condimentum non leo. Aliquam porttitor, ipsum tincidunt pretium ornare, ex felis convallis sem, in imperdiet nibh diam a arcu. Suspendisse potenti. Aliquam tincidunt neque ac finibus lacinia. Sed fermentum quam ullamcorper, pharetra leo ut, vulputate est. Morbi arcu tortor, placerat vestibulum purus eget, commodo commodo neque. Vivamus at felis sodales, rutrum risus sit amet, placerat urna. Curabitur volutpat velit ut lectus scelerisque eleifend. Maecenas et risus pulvinar, pellentesque leo non, commodo tortor. Praesent ipsum arcu, aliquet et quam at, suscipit tempus dui. Sed interdum, turpis id rhoncus molestie, nunc dui finibus arcu, eu iaculis orci lectus eget nisl. Nullam consequat, sem id ultrices blandit, risus tortor iaculis mi, quis facilisis ligula metus eget lorem. Nunc vestibulum sem elit, sit amet pulvinar nunc elementum at. Pellentesque scelerisque, lacus vitae accumsan ultricies, sem enim scelerisque metus, ac maximus mauris purus tempus orci. In ac nisi ullamcorper, imperdiet lorem ut, volutpat eros. Quisque faucibus quis metus ut pellentesque. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Cras mollis eget nunc sit amet accumsan. Nam lacinia purus sit amet eros fringilla, nec pretium est sagittis. Sed at ipsum at turpis facilisis gravida sed at nibh. Praesent sit amet lorem rhoncus, mattis eros a, posuere nisi. Nunc tempus est sit amet nunc suscipit, ut vehicula nunc dignissim. Sed malesuada, massa non maximus dignissim, ante est elementum nibh, in aliquet sem diam a odio. Cras sapien lorem, aliquet at leo eu, interdum porta tortor. Mauris tempor, leo a finibus interdum, dolor justo posuere tellus, pellentesque tincidunt odio mauris sit amet enim. Fusce nulla dolor, elementum vel porttitor et, aliquet ut dolor. Nunc ornare elit ut diam accumsan, dignissim ultrices odio luctus. In at est erat. Vivamus a magna accumsan, posuere mauris sed, lobortis ex. Cras blandit egestas justo, sit amet aliquam eros vestibulum sit amet. Aenean fringilla congue diam, in gravida nisi condimentum vitae. Nam mollis malesuada velit, sed pharetra libero dapibus at. Quisque quis interdum odio. Aliquam sed urna vehicula neque rhoncus egestas. Nunc ac ex convallis, scelerisque libero a, dapibus leo. Ut dapibus id justo ut tincidunt. In egestas libero sit amet nunc lacinia suscipit.","title":"About"},{"location":"pages/faq/","text":"q1 ask Q1 q2 ask Q2","title":"Faq"},{"location":"pages/tutorial/","text":"Tutorial","title":"Tutorial"},{"location":"pages/tutorial/#tutorial","text":"","title":"Tutorial"},{"location":"pages/tutorial/Task%20Managment/Task_Managment/","text":"Task Managment Complex control software can conveniently be subdivided in parts executed according to their real-time requirements. These parts can be implemented by the means of tasks. A task provides the framework for the execution of functions. The operating system provides concurrent and asynchronous execution of tasks. The scheduler organises the sequence of task execution. The OSEK operating system provides a task switching mechanism (scheduler, Task switching mechanism), including a mechanism which is active when no other system or application functionality is active. This mechanism is called idle-mechanism. Two different task concepts are provided by the OSEK operating system: \u2022 basic tasks \u2022 extended tasks Basic Tasks: Basic tasks only release the processor, if \u2022 they terminate \u2022 the OSEK operating system switches to a higher-priority task, or \u2022 an interrupt occurs which causes the processor to switch to an interrupt service routine (ISR). Extended Tasks: Extended tasks are distinguished from basic tasks by being allowed to use the operating system call WaitEvent, which may result in a waiting state ( Event mechanism, WaitEvent). The waiting state allows the processor to be released and to be reassigned to a lower-priority task without the need to terminate the running extended task. In view of the operating system, management of extended tasks is, in principal, more complex than management of basic tasks and requires more system resources. API services provided to the user : \u2022 ActviateTask \u2022 TerminateTask ActivateTask Description: The task is transferred from the suspended state into the ready state. The operating system ensures that the task code is being executed from the first statement. Particularities: The service may be called from interrupt level and from task level . Rescheduling after the call to ActivateTask depends on the place it is called from (ISR, non preemptable task, preemptable task). If E_OS_LIMIT is returned the activation is ignored. When an extended task is transferred from suspended state into ready state all its events are cleared. Syntax Activate task function StatusType ActivateTask ( TaskType <TaskID> ) { ... } Parameter (In) TaskID Task reference Parameter (Out): E_OK TerminateTask Description: This service causes the termination of the calling task. The calling task is transferred from the running state into the suspended state. Particularities: An internal resource assigned to the calling task is automatically released. Other resources occupied by the task shall have been released before the call to TerminateTask. If a resource is still occupied in standard status the behaviour is undefined. If the call was successful, TerminateTask does not return to the call level and the status can not be evaluated. If the version with extended status is used, the service returns in case of error, and provides a status which can be evaluated in the application. If the service TerminateTask is called successfully, it enforces a rescheduling. Ending a task function without call to TerminateTask or ChainTask is strictly forbidden and may leave the system in an undefined state. Syntax Terminate task function StatusType TerminateTask(void) { ... } Parameter (In) none Parameter (Out): E_OK","title":"Task Mangment"},{"location":"pages/tutorial/Task%20Managment/Task_Managment/#task-managment","text":"Complex control software can conveniently be subdivided in parts executed according to their real-time requirements. These parts can be implemented by the means of tasks. A task provides the framework for the execution of functions. The operating system provides concurrent and asynchronous execution of tasks. The scheduler organises the sequence of task execution. The OSEK operating system provides a task switching mechanism (scheduler, Task switching mechanism), including a mechanism which is active when no other system or application functionality is active. This mechanism is called idle-mechanism. Two different task concepts are provided by the OSEK operating system: \u2022 basic tasks \u2022 extended tasks Basic Tasks: Basic tasks only release the processor, if \u2022 they terminate \u2022 the OSEK operating system switches to a higher-priority task, or \u2022 an interrupt occurs which causes the processor to switch to an interrupt service routine (ISR). Extended Tasks: Extended tasks are distinguished from basic tasks by being allowed to use the operating system call WaitEvent, which may result in a waiting state ( Event mechanism, WaitEvent). The waiting state allows the processor to be released and to be reassigned to a lower-priority task without the need to terminate the running extended task. In view of the operating system, management of extended tasks is, in principal, more complex than management of basic tasks and requires more system resources.","title":"Task Managment"},{"location":"pages/tutorial/Task%20Managment/Task_Managment/#api","text":"services provided to the user : \u2022 ActviateTask \u2022 TerminateTask","title":"API"},{"location":"pages/tutorial/Task%20Managment/Task_Managment/#activatetask","text":"","title":"ActivateTask"},{"location":"pages/tutorial/Task%20Managment/Task_Managment/#description","text":"The task is transferred from the suspended state into the ready state. The operating system ensures that the task code is being executed from the first statement.","title":"Description:"},{"location":"pages/tutorial/Task%20Managment/Task_Managment/#particularities","text":"The service may be called from interrupt level and from task level . Rescheduling after the call to ActivateTask depends on the place it is called from (ISR, non preemptable task, preemptable task). If E_OS_LIMIT is returned the activation is ignored. When an extended task is transferred from suspended state into ready state all its events are cleared.","title":"Particularities:"},{"location":"pages/tutorial/Task%20Managment/Task_Managment/#syntax","text":"Activate task function StatusType ActivateTask ( TaskType <TaskID> ) { ... }","title":"Syntax"},{"location":"pages/tutorial/Task%20Managment/Task_Managment/#parameter-in","text":"TaskID Task reference","title":"Parameter (In)"},{"location":"pages/tutorial/Task%20Managment/Task_Managment/#parameter-out","text":"E_OK","title":"Parameter (Out):"},{"location":"pages/tutorial/Task%20Managment/Task_Managment/#terminatetask","text":"","title":"TerminateTask"},{"location":"pages/tutorial/Task%20Managment/Task_Managment/#description_1","text":"This service causes the termination of the calling task. The calling task is transferred from the running state into the suspended state.","title":"Description:"},{"location":"pages/tutorial/Task%20Managment/Task_Managment/#particularities_1","text":"An internal resource assigned to the calling task is automatically released. Other resources occupied by the task shall have been released before the call to TerminateTask. If a resource is still occupied in standard status the behaviour is undefined. If the call was successful, TerminateTask does not return to the call level and the status can not be evaluated. If the version with extended status is used, the service returns in case of error, and provides a status which can be evaluated in the application. If the service TerminateTask is called successfully, it enforces a rescheduling. Ending a task function without call to TerminateTask or ChainTask is strictly forbidden and may leave the system in an undefined state.","title":"Particularities:"},{"location":"pages/tutorial/Task%20Managment/Task_Managment/#syntax_1","text":"Terminate task function StatusType TerminateTask(void) { ... }","title":"Syntax"},{"location":"pages/tutorial/Task%20Managment/Task_Managment/#parameter-in_1","text":"none","title":"Parameter (In)"},{"location":"pages/tutorial/Task%20Managment/Task_Managment/#parameter-out_1","text":"E_OK","title":"Parameter (Out):"}]}